#!/bin/bash

function transposeMatrix() {

        matrixFile="tempMatrixFile"

        if [[ $# > 1 ]]
        then
                cat $2 > "$matrixFile"
        else
                cat > "$matrixFile"
        fi

        # Temporary file to build and store transposed matrix. Will not be saved.
        tempFile="transposeMatrixTempFile"

        # Matrix dimension variables
        numOfRows=$(wc -l < $matrixFile)
        numOfItems=$(wc -w < $matrixFile)
        numOfCols=$(( numOfItems / numOfRows ))

        # This variable keeps track of which column the function is currently transposing
        colIndex=1

        # For each column in the original matrix
        while [[ $colIndex -le $numOfCols ]]
        do
                # This variable keeps track of which row the function is working on
                rowIndex=1

                # For each row in the original matrix
                while read myLine
                do
                        # If not the last row, append number at colIndex followed by a tab
                        if [[ $rowIndex -lt $numOfRows ]]
                        then
                                echo $myLine | cut -d " " -f $colIndex | tr '\n' '\t' >> $tempFile
                                (( rowIndex++ ))
                        # If last row, append number followed by a new line
                        else
                                echo $myLine | cut -d " " -f $colIndex >> $tempFile
                        fi
                done < $matrixFile

                # Increment index to transpose the next column
                (( colIndex++ ))
        done

        # Display the transposed matrix & delete the temp file
        cat $tempFile
        rm $tempFile $matrixFile
}


tmpFile="multiplyTempfile"
tempMatrix="tempMatrixFile$$"

transposeMatrix $@ > ${tempMatrix}

# Make the input row file
numOfRows1=$(wc -l < $1)
numOfItems1=$(wc -w < $1)
numOfCols1=$(( numOfItems1 / numOfRows1 ))

numOfRows2=$(wc -l < $tempMatrix)
numOfItems2=$(wc -w < $tempMatrix)
numOfCols2=$(( numOfItems2 / numOfRows2 ))

while read myLine1 
do
	index1=0
	while read myLine2 
	do
		sum=0
		for ((index2=1; index2 <= $numOfRows2; index2++))
		do
			num1=$(echo $myLine1 | cut -d " " -f $index2)
			num2=$(echo $myLine2 | cut -d " " -f $index2)
			sum=$(( sum + (num1 * num2) ))
		done
		
		
		(( index1++ ))
		
		if [[ $index1 -lt $numOfRows1 ]]
		then
			echo -e -n "$sum\t" >> $tmpFile
		else
			echo $sum >> $tmpFile
		fi
	
	done < $tempMatrix
done < $1 

#sum=0
#while read myLine1 && read myLine2 <&3
#do
#	colIndex=1
#
#	while [[ $colIndex -le $numOfCols ]]
#	do
#
#		num1=$(echo $myLine1 | cut -d " " -f $colIndex) 
#		num2=$(echo $myLine2 | cut -d " " -f $colIndex) 
#
#		sum=$(( num1 + num2 ))	
#
#
#		if [[ $colIndex -lt $numOfCols ]]
#		then
#			echo -e -n  "$sum\t" >> $tempFile
#		else 
#			echo $sum >> $tempFile
#		fi
#
#		(( colIndex++ ))
#	done
#
#done < $1 3< $2

if [[ -r $tmpFile ]]
then
	cat $tmpFile
	rm $tmpFile
elif [[ -r $tempMatrix ]]
then
	cat $tempMatrix
	rm $tempMatrix
fi
