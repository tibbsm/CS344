#!/bin/bash

###############################################################################
# Program Functions
###############################################################################

###############################################################################
# check_arguments()
#
# Usage:
# 	check_arguments [ARGUMENTS]
# 
# Description:
# Checks the number of arguments passed in with corresponding function calls.
# If there is a wrong number of arguments, it prints an error message to
# stderr. Otherwise, it returns 0.
#
###############################################################################
function check_arguments() {

	# Error message variables
	err_message="ERROR: You entered the wrong number of arguments."
	err_info="You entered $(( ${#} - 1)) for the ${1} operation."
	fix_info="The ${1} operation takes no more than 1 argument."
	fix_info_2="The ${1} operation takes exactly 2 arguments."

	# Checks the first argument for the operation
	case "${1}" in
                "dims" | "transpose" | "mean")
			# If there are more than 2 arguments, print error 
			# message and return 1.
 			if [[ "${#}" -gt 2 ]]
			then 
				>&2 echo ${err_message} ${err_info}
				>&2 echo ${fix_info}
				exit 1
			fi	
                        ;;
		"add" | "multiply")	
			# If argument not equal to 3, print error message
			# and return 1.
			if [[ "${#}" -ne 3 ]]
			then 	
				>&2 echo ${err_message} ${err_info}
				>&2 echo ${fix_info_2}
				exit 1
			fi
			;;
	esac
}

###############################################################################
# check_files()
#
# Usage:
# 	check_files [ARGUMENTS]
#
# Description:
# This function checks whether passed in files are readable or not. If the
# files cannot be read it prints an error message and returns. Otherwise,
# it returns 0. 
###############################################################################
function check_files() {

	# For each argument passed in..
	for arg in "${@}"
	do
		# If the file is not readable print error message and return 1.
		if [[ ! -r "${arg}" ]]
		then 
			>&2 echo "ERROR: '"${arg}"' file cannot be read."
			exit 1
		fi
	done
}

###############################################################################
# get_dimensions()
#
# Usage:
# 	get_dimensions [MATRIX]
#
# Descriptions:
# This functions takes a matrix file and returns the number of rows, followed
# by a space, then the number of columns.
###############################################################################
function get_dimensions() {
	
	# Initialize the temp file to hold the matrix
	matrixFile="tempMatrixFile$$"

	# If there is a matrix file copy it into matrixFile
	if [[ "${#}" -gt 1 ]]
	then 
		cat "${2}" > "${matrixFile}"
	# Otherwise, get data from stdin
	else 
		cat > "${matrixFile}"
	fi
		
	# Initialize the row count
	row=0

	# Count each line in the file (rows)
	while read myLine
	do
        	((row++))
	done < "${matrixFile}"

	# Initialize columns variable to the total # of items in the matrix 
	col=$(wc -w < "${matrixFile}")

	# Divide the total items by the # of rows to get the # of columns
	col=$((col / row))

	# Print out the dimensions of the matrix [row] [col]
	echo "${row}" "${col}"

	# Remove the temp file
	rm "${matrixFile}"
}

###############################################################################
# transpose_matrix()
#
# Usage: 
# 	transpose_matrix [MATRIX] 
#
# Description:
# This function reflects the elements of a matrix along the main diagonal.
# A MxN matrix will become an NxM matrix and the values along the main
# diagonal will remain unchanged.
###############################################################################
function transpose_matrix() {

	# Initialize temporary file to hold the matrix
	matrixFile="tempMatrixFile$$"

	# If a matrix file is passed in copy it to the temp file
        if [[ ${#} -gt 1 ]]
        then
                cat ${2} > "${matrixFile}"
	# Otherwise, get the matrix information from stdin
        else
                cat > "${matrixFile}"
        fi

	# Temporary file to build and store transposed matrix. 
	transposeTempFile="transposeMatrixTempFile$$"

	# Matrix dimension variables
	numOfRows="$(wc -l < $matrixFile)"
	numOfItems="$(wc -w < $matrixFile)"
	numOfCols="$(( numOfItems / numOfRows ))"

	# This variable tracks which column the function is transposing
	colIndex=1

	# For each column in the original matrix
	while [[ "${colIndex}" -le "${numOfCols}" ]]
	do
		# This variable tracks the row the function is working on
		rowIndex=1

		# For each row in the original matrix
		while read myLine
		do
			# If not the last row, append number at colIndex
			# followed by a tab
			if [[ "${rowIndex}" -lt "${numOfRows}" ]]
			then
				echo ${myLine} | cut -d " " -f "${colIndex}" | tr '\n' '\t' >> "${transposeTempFile}"
				(( rowIndex++ ))
			# If last row, append number followed by a new line
			else
				echo ${myLine} | cut -d " " -f "${colIndex}" >> "${transposeTempFile}"
			fi
		done < "${matrixFile}"
	
		# Increment index to transpose the next column	
		(( colIndex++ ))
	done

	# Display the transposed matrix & delete the temp file
	cat "${transposeTempFile}"
	rm "${transposeTempFile}" "${matrixFile}"
}


###############################################################################
# get_mean()
#
# Usage:
# 	mean [MATRIX]
#
# Description:
# This function takes an MxN matrix and returns an 1xN row vector, where the
# first element is the mean of column one, the second is the mean of column
# two, and so on.
###############################################################################
function get_mean() {

	# Initialize temp file to hold the matrix means
	matrixFile="tempMatrixFile$$"

	# If a matrix file is passed in copy it to the temp file
        if [[ "${#}" -gt 1 ]]
        then
                cat "${2}" > "$matrixFile"
	# Otherwise, get the matrix information from stdin
        else
                cat > "$matrixFile"
        fi

	# Temporary file to hold column means
	tempMeanFile="meanTempFile$$"	

	# Matrix dimension variables
	numOfRows=$(wc -l < "${matrixFile}")
	numOfItems=$(wc -w < "${matrixFile}")
	numOfCols=$(( numOfItems / numOfRows ))

	# Column index to track which column's mean the function is calculating
	colIndex=1

	# For each column...
	while [[ "${colIndex}" -le "${numOfCols}" ]]
	do
		# Initialize column's sum variable	
		sum=0

		# For every row/number in a column...
		while read myLine
		do
			# Get the number from the column & add it to the sum			
			num=$(echo ${myLine} | cut -d " " -f ${colIndex})
			sum=$(( sum + num ))
		done < "${matrixFile}"

		# Calculate the mean and round to the nearest integer
		(( mean= ($sum + ($numOfRows /2) * (($sum > 0) * 2 - 1)) / $numOfRows ))
		
		# Copy columns mean to the temp file
		echo -n "${mean}" >> "${tempMeanFile}"

		# If row isn't last row, append a tab to the file
		if [[ "${colIndex}" -lt "${numOfCols}" ]]
		then
			echo -n -e '\t' >> "${tempMeanFile}"
		# If last row, append new line to the file
		else
			echo >> "${tempMeanFile}"
		fi

		# Increment column index to work on the next column
		(( colIndex++ ))
	done

	# Display the means and delete the tempMeanFile
	cat "${tempMeanFile}"
	rm "${tempMeanFile}" "${matrixFile}"
}

###############################################################################
# add_matrices()
#
# Usage: 
# 	add_matrices MATRIX_LEFT MATRIX_RIGHT
# 
# Description:
# This function takes two MxN matrices and adds them together element-wise
# to produce a MxN matrix. It will return an error if the matrices do not
# have the same dimensions.
###############################################################################
function add_matrices() {

	# Matrix dimension variables
        numOfRows1=$(wc -l < "${1}")
        numOfItems1=$(wc -w < "${1}")
        numOfCols1=$(( numOfItems1 / numOfRows1 ))

        numOfRows2=$(wc -l < "${2}")
        numOfItems2=$(wc -w < "${2}")
        numOfCols2=$(( numOfItems2 / numOfRows2 ))

	# Check if the matrices have the same dimensions
	if [[ "${numOfRows1}" -ne "${numOfRows2}" ]]  ||
           [[ "${numOfCols1}" -ne "${numOfCols2}" ]]
        then
                >&2 echo "Error: You cannot add matrices of different sizes."
                exit 1	
	fi

	# Temporary file to hold the sums from adding the matrices
	tempAddFile="addMatricesTempFile$$"

	# Read each line of data from both matrices
	while read myLine1 && read myLine2 <&3
	do
		# Initialize variables hold sums and track column indices
		sum=0
		colIndex=1
		
		# For each column in a row
		while [[ "${colIndex}" -le "${numOfCols1}" ]]
		do
			# Get the numbers to add from each matrix
			num1=$(echo $myLine1 | cut -d " " -f $colIndex)
			num2=$(echo $myLine2 | cut -d " " -f $colIndex)

			# Calculate the sum
			sum=$(( num1 + num2 ))

			# If not the last column, append tab after number
			if [[ "${colIndex}" -lt "${numOfCols1}" ]]
			then 
				echo -e -n "${sum}\t" >> "${tempAddFile}"
			# If last column, append new line after number
			else
				echo "${sum}" >> "${tempAddFile}"
			fi
			
			# Increment column index
			(( colIndex++ ))
		done
	done<"${1}" 3<"${2}"

	# Print the final matrix and then delete the temp file		
	cat "${tempAddFile}"
	rm "${tempAddFile}"
}

###############################################################################
# Program Functions
###############################################################################
# matrix multiply MATRIX_LEFT MATRIX_RIGHT   
# multiply should take an MxN and NxP matrix and produce an MxP matrix. Note that, unlike addition, matrix multiplication is not commutative. That is A*B != B*A.
function multiplyMatrices() {

	# Initialize variable to hold number of rows
	numOfRows1=$(wc -l < $1)
	numOfItems1=$(wc -w < $1)
        numOfCols1=$(( numOfItems1 / numOfRows1 ))

	numOfRows2=$(wc -l < $2)
	numOfItems2=$(wc -w < $2)
        numOfCols2=$(( numOfItems2 / numOfRows2 ))

	# Check if the dimensions of the matrices are valid.	
	if [[ "${numOfCols1}" -ne "${numOfRows2}" ]]
        then
                >&2 echo "Error: You cannot multiply these matrices."
                exit 1
        fi	

	# Temporary file to hold the products of multiplying matrices
	tempMultiplyFile="multiplyMatricesTempFile$$"

	# Temporary file to hold transposed matrix 2
	tempMatrix="tempMultMatrixFile$$"

	# Transpose matrix 2 into the tempMatrix
	transpose_matrix "${@}" > "${tempMatrix}"

	# For every row in MATRIX_RIGHT
	while read myLine1
	do
		# Variable to track which column to print product 
		product_index=0

		# For every row in the transposed MATRIX_LEFT
		while read myLine2
		do
			# Initialize sum variable 
			sum=0
			
			# Multiply each column of each row and sum their products
			for ((col_index=1; col_index <= $numOfCols2; col_index++))
			do
				num1=$(echo ${myLine1} | cut -d " " -f ${col_index})
				num2=$(echo ${myLine2} | cut -d " " -f ${col_index})
				sum=$(( sum + (num1 * num2) ))
			done

			# Increment index to work on the next value
			(( product_index++ ))

			# If it's not the last columns, append a tab
			if [[ "${product_index}" -lt "${numOfCols2}" ]]
			then
				echo -e -n "$sum\t" >> "${tempMultiplyFile}"
			# Otherwise, append a new line
			else
				echo "${sum}" >> "${tempMultiplyFile}"
			fi
		done < "${tempMatrix}"
	done < "${1}"

	# Print product matrix and remove temp files
	if [[ -r "${tempMultiplyFile}" ]]
	then
		cat "${tempMultiplyFile}"
		rm "${tempMultiplyFile}"
	fi
	if [[ -r "${tempMatrix}" ]]
	then
		rm "${tempMatrix}"
	fi
}

###############################################################################
# Main
###############################################################################
# main()
#
# Usage:
# 	main [<options>] [<arguments>]
#
# Description:
#   	Entry point for the program.
function main() {
	case "$1" in 
		"dims")
			check_arguments $@
			check_files "${@:2}"
			get_dimensions $@
			;;
		"transpose")
			check_arguments $@
			check_files "${@:2}"
			transpose_matrix $@
			;;
		"mean")
			check_arguments $@
			check_files "${@:2}"
			get_mean $@
			;;
		"add")
			check_arguments $@
			check_files "${@:2}"
			add_matrices $2 $3
			;;
		"multiply")
			check_arguments $@
			check_files "${@:2}"
			multiplyMatrices $2 $3
			;;
		*)
			>&2 echo "ERROR: Operation '$1' unknown."
                        exit 1	
			;;
	esac
}

# Call main() after everything has been defined.
main "$@"

